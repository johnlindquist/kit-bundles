// Generated by dts-bundle-generator v5.9.0

/**
 * Main entry point into the "dotenv-flow". Allows configuration before loading `.env*` files.
 *
 * @param options - configuration options
 * @return an object with a `parsed` key containing the loaded content or an `error` key with an error that is occurred
 */
export function config(options?: DotenvConfigOptions): DotenvLoadOutput;
export interface DotenvConfigOptions {
	/**
	 * Node environment (development/test/production/etc,.).
	 */
	node_env?: string | undefined;
	/**
	 * Default node environment to use if `process.env.NODE_ENV` is not present.
	 */
	default_node_env?: string | undefined;
	/**
	 * Path to `.env*` files directory.
	 */
	path?: string | undefined;
	/**
	 * Encoding for reading the `.env*` files.
	 */
	encoding?: string | undefined;
	/**
	 * In some cases the original "dotenv" library can be used by one of the dependent npm modules.
	 * It causes calling the original `dotenv.config()` that loads the `.env` file from your project before you can call `dotenv-flow.config()`.
	 *
	 * Such cases breaks `.env*` files priority because the previously loaded environment variables are treated as shell-defined thus having the higher priority.
	 *
	 * Setting the `purge_dotenv` option to `true` can gracefully fix this issue.
	 */
	purge_dotenv?: boolean | undefined;
	/**
	 * Suppress all console outputs except errors and deprecation warnings.
	 */
	silent?: boolean | undefined;
}
export interface DotenvLoadOutput {
	error?: Error | undefined;
	parsed?: DotenvParseOutput | undefined;
}
export interface DotenvParseOutput {
	[name: string]: string;
}

export {};
